// Code generated by MockGen. DO NOT EDIT.
// Source: fetcher.go

// Package fetcher is a generated GoMock package.
package fetcher

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// GoMockClient is a mock of Fetcher interface.
type GoMockClient struct {
	ctrl     *gomock.Controller
	recorder *GoMockClientMockRecorder
}

// GoMockClientMockRecorder is the mock recorder for GoMockClient.
type GoMockClientMockRecorder struct {
	mock *GoMockClient
}

// NewGoMockClient creates a new mock instance.
func NewGoMockClient(ctrl *gomock.Controller) *GoMockClient {
	mock := &GoMockClient{ctrl: ctrl}
	mock.recorder = &GoMockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockClient) EXPECT() *GoMockClientMockRecorder {
	return m.recorder
}

// ExtractMetadata mocks base method.
func (m *GoMockClient) ExtractMetadata(file io.Reader) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractMetadata", file)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractMetadata indicates an expected call of ExtractMetadata.
func (mr *GoMockClientMockRecorder) ExtractMetadata(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractMetadata", reflect.TypeOf((*GoMockClient)(nil).ExtractMetadata), file)
}

// FetchPage mocks base method.
func (m *GoMockClient) FetchPage(ctx context.Context, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPage", ctx, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPage indicates an expected call of FetchPage.
func (mr *GoMockClientMockRecorder) FetchPage(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPage", reflect.TypeOf((*GoMockClient)(nil).FetchPage), ctx, url)
}

// SavePage mocks base method.
func (m *GoMockClient) SavePage(filename string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePage", filename, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePage indicates an expected call of SavePage.
func (mr *GoMockClientMockRecorder) SavePage(filename, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePage", reflect.TypeOf((*GoMockClient)(nil).SavePage), filename, body)
}

// Zip mocks base method.
func (m *GoMockClient) Zip(filename string, filePaths, dirs []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zip", filename, filePaths, dirs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Zip indicates an expected call of Zip.
func (mr *GoMockClientMockRecorder) Zip(filename, filePaths, dirs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zip", reflect.TypeOf((*GoMockClient)(nil).Zip), filename, filePaths, dirs)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), req)
}
